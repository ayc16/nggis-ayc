import{e as X,h as x,k as h,l as H,m as A,n as d,o as a,p as S,q as M,v as O,z as E}from"./chunk-ZAQLF7TN.js";import{r as v,t as m}from"./chunk-HQMV3KQV.js";import{a as C}from"./chunk-CRMMDK2Z.js";var Q=()=>v.getLogger("esri.views.webgl.checkWebGLError");function ee(t,e){switch(e){case t.INVALID_ENUM:return"Invalid Enum. An unacceptable value has been specified for an enumerated argument.";case t.INVALID_VALUE:return"Invalid Value. A numeric argument is out of range.";case t.INVALID_OPERATION:return"Invalid Operation. The specified command is not allowed for the current state.";case t.INVALID_FRAMEBUFFER_OPERATION:return"Invalid Framebuffer operation. The currently bound framebuffer is not framebuffer complete when trying to render to or to read from it.";case t.OUT_OF_MEMORY:return"Out of memory. Not enough memory is left to execute the command.";case t.CONTEXT_LOST_WEBGL:return"WebGL context has been lost";default:return"Unknown error"}}var V=!!C("enable-feature:webgl-debug");function L(){return V}function ue(){return V}function b(t){if(L()){let e=t.getError();if(e){let r=ee(t,e),o=new Error().stack;Q().error(new m("webgl-error","WebGL error occurred",{message:r,stack:o}))}}}var U;(function(t){t[t.Texture=0]="Texture",t[t.RenderBuffer=1]="RenderBuffer"})(U||(U={}));function W(t){switch(t){case x.BYTE:case x.UNSIGNED_BYTE:return 1;case x.SHORT:case x.UNSIGNED_SHORT:case x.HALF_FLOAT:return 2;case x.FLOAT:case x.INT:case x.UNSIGNED_INT:return 4}}function te(t){let e=t.gl;switch(e.getError()){case e.NO_ERROR:return null;case e.INVALID_ENUM:return"An unacceptable value has been specified for an enumerated argument";case e.INVALID_VALUE:return"An unacceptable value has been specified for an argument";case e.INVALID_OPERATION:return"The specified command is not allowed for the current state";case e.INVALID_FRAMEBUFFER_OPERATION:return"The currently bound framebuffer is not framebuffer complete";case e.OUT_OF_MEMORY:return"Not enough memory is left to execute the command";case e.CONTEXT_LOST_WEBGL:return"WebGL context is lost"}return"Unknown error"}function fe(t,e,r,o,s=0){let n=t.gl;t.bindBuffer(r);for(let i of o){let c=e.get(i.name);if(c===void 0){console.warn(`There is no location for vertex attribute '${i.name}' defined.`);continue}let u=s*i.stride;if(i.count<=4)n.vertexAttribPointer(c,i.count,i.type,i.normalized,i.stride,i.offset+u),n.enableVertexAttribArray(c),i.divisor>0&&t.gl.vertexAttribDivisor(c,i.divisor);else if(i.count===9)for(let l=0;l<3;l++)n.vertexAttribPointer(c+l,3,i.type,i.normalized,i.stride,i.offset+12*l+u),n.enableVertexAttribArray(c+l),i.divisor>0&&t.gl.vertexAttribDivisor(c+l,i.divisor);else if(i.count===16)for(let l=0;l<4;l++)n.vertexAttribPointer(c+l,4,i.type,i.normalized,i.stride,i.offset+16*l+u),n.enableVertexAttribArray(c+l),i.divisor>0&&t.gl?.vertexAttribDivisor(c+l,i.divisor);else console.error("Unsupported vertex attribute element count: "+i.count);if(L()){let l=te(t),_=W(i.type),p=i.offset,T=Math.round(_/p)!==_/p?`. Offset not a multiple of stride. DataType requires ${_} bytes, but descriptor has an offset of ${p}`:"";l&&console.error(`Unable to bind vertex attribute "${i.name}" with baseInstanceOffset ${u}${T}:`,l,i)}}}function ge(t,e,r,o){let s=t.gl;t.bindBuffer(r);for(let n of o){let i=e.get(n.name);if(n.count<=4)s.disableVertexAttribArray(i),n.divisor&&n.divisor>0&&t.gl?.vertexAttribDivisor(i,0);else if(n.count===9)for(let c=0;c<3;c++)s.disableVertexAttribArray(i+c),n.divisor&&n.divisor>0&&t.gl?.vertexAttribDivisor(i+c,0);else if(n.count===16)for(let c=0;c<4;c++)s.disableVertexAttribArray(i+c),n.divisor&&n.divisor>0&&t.gl?.vertexAttribDivisor(i+c,0);else console.error("Unsupported vertex attribute element count: "+n.count)}t.unbindBuffer(X.ARRAY_BUFFER)}function z(t){switch(t){case d.ALPHA:case d.LUMINANCE:case d.RED:case d.RED_INTEGER:case a.R8:case a.R8I:case a.R8UI:case a.R8_SNORM:case M.STENCIL_INDEX8:return 1;case d.LUMINANCE_ALPHA:case d.RG:case d.RG_INTEGER:case a.RGBA4:case a.R16F:case a.R16I:case a.R16UI:case a.RG8:case a.RG8I:case a.RG8UI:case a.RG8_SNORM:case a.RGB565:case a.RGB5_A1:case M.DEPTH_COMPONENT16:return 2;case d.DEPTH_COMPONENT:case d.RGB:case d.RGB_INTEGER:case a.RGB8:case a.RGB8I:case a.RGB8UI:case a.RGB8_SNORM:case a.SRGB8:case M.DEPTH_COMPONENT24:return 3;case d.DEPTH_STENCIL:case d.DEPTH24_STENCIL8:case d.RGBA:case d.RGBA_INTEGER:case a.RGBA8:case a.R32F:case a.R11F_G11F_B10F:case a.RG16F:case a.R32I:case a.R32UI:case a.RG16I:case a.RG16UI:case a.RGBA8I:case a.RGBA8UI:case a.RGBA8_SNORM:case a.SRGB8_ALPHA8:case a.RGB9_E5:case a.RGB10_A2UI:case a.RGB10_A2:case M.DEPTH_STENCIL:case M.DEPTH_COMPONENT32F:case M.DEPTH24_STENCIL8:return 4;case M.DEPTH32F_STENCIL8:return 5;case a.RGB16F:case a.RGB16I:case a.RGB16UI:return 6;case a.RG32F:case a.RG32I:case a.RG32UI:case a.RGBA16F:case a.RGBA16I:case a.RGBA16UI:return 8;case a.RGB32F:case a.RGB32I:case a.RGB32UI:return 12;case a.RGBA32F:case a.RGBA32I:case a.RGBA32UI:return 16;case E.COMPRESSED_RGB_S3TC_DXT1_EXT:case E.COMPRESSED_RGBA_S3TC_DXT1_EXT:return .5;case E.COMPRESSED_RGBA_S3TC_DXT3_EXT:case E.COMPRESSED_RGBA_S3TC_DXT5_EXT:return 1;case E.COMPRESSED_R11_EAC:case E.COMPRESSED_SIGNED_R11_EAC:case E.COMPRESSED_RGB8_ETC2:case E.COMPRESSED_SRGB8_ETC2:case E.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2:case E.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2:return .5;case E.COMPRESSED_RG11_EAC:case E.COMPRESSED_SIGNED_RG11_EAC:case E.COMPRESSED_RGBA8_ETC2_EAC:case E.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:return 1}return 0}var w=class{constructor(e=0,r=e){this.width=e,this.height=r,this.target=A.TEXTURE_2D,this.pixelFormat=d.RGBA,this.dataType=S.UNSIGNED_BYTE,this.samplingMode=h.LINEAR,this.wrapMode=H.REPEAT,this.maxAnisotropy=1,this.flipped=!1,this.hasMipmap=!1,this.isOpaque=!1,this.unpackAlignment=4,this.preMultiplyAlpha=!1,this.depth=1,this.isImmutable=!1}};function Y(t){return t.width<=0||t.height<=0?0:Math.round(t.width*t.height*(t.hasMipmap?4/3:1)*(t.internalFormat==null?4:z(t.internalFormat)))}var G=class t extends w{constructor(e,r){switch(super(),this.context=e,Object.assign(this,r),this.internalFormat){case a.R16F:case a.R16I:case a.R16UI:case a.R32F:case a.R32I:case a.R32UI:case a.R8_SNORM:case a.R8:case a.R8I:case a.R8UI:this.pixelFormat=d.RED}}static validate(e,r){return new t(e,r)}};var k=4;var re=class g{constructor(e,r=null,o=null){if(this.type=U.Texture,this._glName=null,this._samplingModeDirty=!1,this._wrapModeDirty=!1,this._wasImmutablyAllocated=!1,"context"in e)this._descriptor=e,o=r;else{let s=G.validate(e,r);if(!s)throw new m("Texture descriptor invalid");this._descriptor=s}this._descriptor.target===A.TEXTURE_CUBE_MAP?this._setDataCubeMap(o):this.setData(o)}get glName(){return this._glName}get descriptor(){return this._descriptor}get usedMemory(){return Y(this._descriptor)}get isDirty(){return this._samplingModeDirty||this._wrapModeDirty}dispose(){this._glName&&this._descriptor.context.instanceCounter.decrement(O.Texture,this),this._descriptor.context.gl&&this._glName&&(this._descriptor.context.unbindTexture(this),this._descriptor.context.gl.deleteTexture(this._glName),this._glName=null)}release(){this.dispose()}resize(e,r){let o=this._descriptor;if(o.width!==e||o.height!==r){if(this._wasImmutablyAllocated)throw new m("Immutable textures can't be resized!");o.width=e,o.height=r,this._descriptor.target===A.TEXTURE_CUBE_MAP?this._setDataCubeMap(null):this.setData(null)}}_setDataCubeMap(e=null){for(let r=A.TEXTURE_CUBE_MAP_POSITIVE_X;r<=A.TEXTURE_CUBE_MAP_NEGATIVE_Z;r++)this._setData(e,r)}setData(e){this._setData(e)}_setData(e,r){if(!this._descriptor.context?.gl)return;let o=this._descriptor.context.gl;b(o),this._glName||(this._glName=o.createTexture(),this._glName&&this._descriptor.context.instanceCounter.increment(O.Texture,this)),e===void 0&&(e=null);let s=this._descriptor,n=r??s.target,i=N(n);e===null&&(s.width=s.width||k,s.height=s.height||k,i&&(s.depth=s.depth??1));let c=this._descriptor.context.bindTexture(this,g.TEXTURE_UNIT_FOR_UPDATES);this._descriptor.context.setActiveTexture(g.TEXTURE_UNIT_FOR_UPDATES),F(s),this._configurePixelStorage(),b(o);let u=this._deriveInternalFormat();if(j(e)){let l="width"in e?e.width:e.codedWidth,_="height"in e?e.height:e.codedHeight,p=1;e instanceof HTMLVideoElement&&(l=e.videoWidth,_=e.videoHeight),s.width&&s.height,i&&s.depth,s.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(n,u,s.hasMipmap,l,_,p),this._texImage(n,0,u,l,_,p,e),b(o),s.hasMipmap&&this.generateMipmap(),s.width||(s.width=l),s.height||(s.height=_),i&&!s.depth&&(s.depth=p)}else{let{width:l,height:_,depth:p}=s;if(l==null||_==null)throw new m("Width and height must be specified!");if(i&&p==null)throw new m("Depth must be specified!");if(s.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(n,u,s.hasMipmap,l,_,p),y(e)){let T=e.levels,R=q(n,l,_,p),D=Math.min(R-1,T.length-1);o.texParameteri(s.target,this._descriptor.context.gl.TEXTURE_MAX_LEVEL,D);let I=u;if(!ae(I))throw new m("Attempting to use compressed data with an uncompressed format!");this._forEachMipmapLevel((f,P,B,Z)=>{let J=T[Math.min(f,T.length-1)];this._compressedTexImage(n,f,I,P,B,Z,J)},D)}else this._texImage(n,0,u,l,_,p,e),b(o),s.hasMipmap&&this.generateMipmap()}K(o,this._descriptor),$(o,this._descriptor),se(this._descriptor.context,this._descriptor),b(o),this._descriptor.context.bindTexture(c,g.TEXTURE_UNIT_FOR_UPDATES)}updateData(e,r,o,s,n,i,c=0){i||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");let u=this._descriptor,l=this._deriveInternalFormat(),{context:_,pixelFormat:p,dataType:T,target:R,isImmutable:D}=u;if(D&&!this._wasImmutablyAllocated)throw new m("Cannot update immutable texture before allocation!");let I=_.bindTexture(this,g.TEXTURE_UNIT_FOR_UPDATES,!0);(r<0||o<0||r+s>u.width||o+n>u.height)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage();let{gl:f}=_;c&&f.pixelStorei(f.UNPACK_SKIP_ROWS,c),j(i)?f.texSubImage2D(R,e,r,o,s,n,p,T,i):y(i)?f.compressedTexSubImage2D(R,e,r,o,s,n,l,i.levels[e]):f.texSubImage2D(R,e,r,o,s,n,p,T,i),c&&f.pixelStorei(f.UNPACK_SKIP_ROWS,0),_.bindTexture(I,g.TEXTURE_UNIT_FOR_UPDATES)}updateData3D(e,r,o,s,n,i,c,u){u||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");let l=this._descriptor,_=this._deriveInternalFormat(),{context:p,pixelFormat:T,dataType:R,isImmutable:D,target:I}=l;if(D&&!this._wasImmutablyAllocated)throw new m("Cannot update immutable texture before allocation!");N(I)||console.warn("Attempting to set 3D texture data on a non-3D texture");let f=p.bindTexture(this,g.TEXTURE_UNIT_FOR_UPDATES);p.setActiveTexture(g.TEXTURE_UNIT_FOR_UPDATES),(r<0||o<0||s<0||r+n>l.width||o+i>l.height||s+c>l.depth)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage();let{gl:P}=p;if(y(u))u=u.levels[e],P.compressedTexSubImage3D(I,e,r,o,s,n,i,c,_,u);else{let B=u;P.texSubImage3D(I,e,r,o,s,n,i,c,T,R,B)}p.bindTexture(f,g.TEXTURE_UNIT_FOR_UPDATES)}generateMipmap(){let e=this._descriptor;if(!e.hasMipmap){if(this._wasImmutablyAllocated)throw new m("Cannot add mipmaps to immutable texture after allocation");e.hasMipmap=!0,this._samplingModeDirty=!0,F(e)}e.samplingMode===h.LINEAR?(this._samplingModeDirty=!0,e.samplingMode=h.LINEAR_MIPMAP_NEAREST):e.samplingMode===h.NEAREST&&(this._samplingModeDirty=!0,e.samplingMode=h.NEAREST_MIPMAP_NEAREST);let r=this._descriptor.context.bindTexture(this,g.TEXTURE_UNIT_FOR_UPDATES);this._descriptor.context.setActiveTexture(g.TEXTURE_UNIT_FOR_UPDATES),this._descriptor.context.gl.generateMipmap(e.target),this._descriptor.context.bindTexture(r,g.TEXTURE_UNIT_FOR_UPDATES)}clearMipmap(){let e=this._descriptor;if(e.hasMipmap){if(this._wasImmutablyAllocated)throw new m("Cannot delete mipmaps to immutable texture after allocation");e.hasMipmap=!1,this._samplingModeDirty=!0,F(e)}e.samplingMode===h.LINEAR_MIPMAP_NEAREST?(this._samplingModeDirty=!0,e.samplingMode=h.LINEAR):e.samplingMode===h.NEAREST_MIPMAP_NEAREST&&(this._samplingModeDirty=!0,e.samplingMode=h.NEAREST)}setSamplingMode(e){e!==this._descriptor.samplingMode&&(this._descriptor.samplingMode=e,this._samplingModeDirty=!0)}setWrapMode(e){e!==this._descriptor.wrapMode&&(this._descriptor.wrapMode=e,F(this._descriptor),this._wrapModeDirty=!0)}applyChanges(){let e=this._descriptor,r=e.context.gl;this._samplingModeDirty&&(K(r,e),this._samplingModeDirty=!1),this._wrapModeDirty&&($(r,e),this._wrapModeDirty=!1)}_deriveInternalFormat(){if(this._descriptor.internalFormat!=null)return this._descriptor.internalFormat===d.DEPTH_STENCIL&&(this._descriptor.internalFormat=d.DEPTH24_STENCIL8),this._descriptor.internalFormat;switch(this._descriptor.dataType){case S.FLOAT:switch(this._descriptor.pixelFormat){case d.RGBA:return this._descriptor.internalFormat=a.RGBA32F;case d.RGB:return this._descriptor.internalFormat=a.RGB32F;default:throw new m("Unable to derive format")}case S.UNSIGNED_BYTE:switch(this._descriptor.pixelFormat){case d.RGBA:return this._descriptor.internalFormat=a.RGBA8;case d.RGB:return this._descriptor.internalFormat=a.RGB8}}return this._descriptor.internalFormat=this._descriptor.pixelFormat===d.DEPTH_STENCIL?d.DEPTH24_STENCIL8:this._descriptor.pixelFormat}_configurePixelStorage(){let e=this._descriptor.context.gl,{unpackAlignment:r,flipped:o,preMultiplyAlpha:s}=this._descriptor;e.pixelStorei(e.UNPACK_ALIGNMENT,r),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,o?1:0),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,s?1:0)}_texStorage(e,r,o,s,n,i){let{gl:c}=this._descriptor.context;if(!ie(r))throw new m("Immutable textures must have a sized internal format");if(!this._descriptor.isImmutable)return;let u=o?q(e,s,n,i):1;if(N(e)){if(i==null)throw new m("Missing depth dimension for 3D texture upload");c.texStorage3D(e,u,r,s,n,i)}else c.texStorage2D(e,u,r,s,n);this._wasImmutablyAllocated=!0}_texImage(e,r,o,s,n,i,c){let u=this._descriptor.context.gl,l=N(e),{isImmutable:_,pixelFormat:p,dataType:T}=this._descriptor;if(_){if(c!=null){let R=c;if(l){if(i==null)throw new m("Missing depth dimension for 3D texture upload");u.texSubImage3D(e,r,0,0,0,s,n,i,p,T,R)}else u.texSubImage2D(e,r,0,0,s,n,p,T,R)}}else{let R=c;if(l){if(i==null)throw new m("Missing depth dimension for 3D texture upload");u.texImage3D(e,r,o,s,n,i,0,p,T,R)}else u.texImage2D(e,r,o,s,n,0,p,T,R)}}_compressedTexImage(e,r,o,s,n,i,c){let u=this._descriptor.context.gl,l=N(e);if(this._descriptor.isImmutable){if(c!=null)if(l){if(i==null)throw new m("Missing depth dimension for 3D texture upload");u.compressedTexSubImage3D(e,r,0,0,0,s,n,i,o,c)}else u.compressedTexSubImage2D(e,r,0,0,s,n,o,c)}else if(l){if(i==null)throw new m("Missing depth dimension for 3D texture upload");u.compressedTexImage3D(e,r,o,s,n,i,0,c)}else u.compressedTexImage2D(e,r,o,s,n,0,c)}_forEachMipmapLevel(e,r=1/0){let{width:o,height:s,depth:n,hasMipmap:i,target:c}=this._descriptor,u=c===A.TEXTURE_3D;if(o==null||s==null||u&&n==null)throw new m("Missing texture dimensions for mipmap calculation");for(let l=0;e(l,o,s,n),i&&(o!==1||s!==1||u&&n!==1)&&!(l>=r);++l)o=Math.max(1,o>>1),s=Math.max(1,s>>1),u&&(n=Math.max(1,n>>1))}};function F(t){(t.width!=null&&t.width<0||t.height!=null&&t.height<0||t.depth!=null&&t.depth<0)&&console.error("Negative dimension parameters are not allowed!")}function K(t,e){let r=e.samplingMode,o=e.samplingMode;r===h.LINEAR_MIPMAP_NEAREST||r===h.LINEAR_MIPMAP_LINEAR?(r=h.LINEAR,e.hasMipmap||(o=h.LINEAR)):r!==h.NEAREST_MIPMAP_NEAREST&&r!==h.NEAREST_MIPMAP_LINEAR||(r=h.NEAREST,e.hasMipmap||(o=h.NEAREST)),t.texParameteri(e.target,t.TEXTURE_MAG_FILTER,r),t.texParameteri(e.target,t.TEXTURE_MIN_FILTER,o)}function $(t,e){typeof e.wrapMode=="number"?(t.texParameteri(e.target,t.TEXTURE_WRAP_S,e.wrapMode),t.texParameteri(e.target,t.TEXTURE_WRAP_T,e.wrapMode)):(t.texParameteri(e.target,t.TEXTURE_WRAP_S,e.wrapMode.s),t.texParameteri(e.target,t.TEXTURE_WRAP_T,e.wrapMode.t))}function se(t,e){let r=t.capabilities.textureFilterAnisotropic;r&&t.gl.texParameterf(e.target,r.TEXTURE_MAX_ANISOTROPY,e.maxAnisotropy??1)}function ie(t){return t in a}function ae(t){return t in E}function y(t){return t!=null&&"type"in t&&t.type==="compressed"}function oe(t){return t!=null&&"byteLength"in t}function j(t){return t!=null&&!y(t)&&!oe(t)}function N(t){return t===A.TEXTURE_3D||t===A.TEXTURE_2D_ARRAY}function q(t,e,r,o=1){let s=Math.max(e,r);return t===A.TEXTURE_3D&&(s=Math.max(s,o)),Math.round(Math.log(s)/Math.LN2)+1}re.TEXTURE_UNIT_FOR_UPDATES=0;export{L as a,ue as b,b as c,U as d,W as e,te as f,fe as g,ge as h,z as i,w as j,re as k};
